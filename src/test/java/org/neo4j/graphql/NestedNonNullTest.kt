package org.neo4j.graphql

import org.junit.After
import org.junit.Before
import org.junit.Test
import org.neo4j.graphql.TestUtil.assertResult
import org.neo4j.graphql.TestUtil.execute

/**
 * @author mh
 * *
 * @since 05.05.17
 */
class NestedNonNullTest {

    @Before
    @Throws(Exception::class)
    fun setUp() {
        execute("CREATE (:Person {name:'Jane'})-[:WORKS_AT]->(:Company {name:'ACME'})")
    }

    @After
    @Throws(Exception::class)
    fun tearDown() {
        TestUtil.tearDown()
    }

    @Test
    fun dynamicMutationConflictsWithAutoGenerated() {
        val schema = """
type Person {
    name: String
    company: Company @relation(name:"WORKS_AT")
    company2: Company! @relation(name:"WORKS_AT")
    companies: [Company]! @relation(name:"WORKS_AT")
    companies2: [Company!]! @relation(name:"WORKS_AT")
}
type Company {
    name: String
}
"""

        TestUtil.setup(schema)

        assertResult("""{ p: person { company(name: "ACME") { name } } }""",
                mapOf("p" to listOf(mapOf("company" to mapOf("name" to "ACME")))))

        assertResult("""{ p: person { company2(name: "ACME") { name } } }""",
                mapOf("p" to listOf(mapOf("company2" to mapOf("name" to "ACME")))))

        assertResult("""{ p: person { companies(name: "ACME") { name } } }""",
                mapOf("p" to listOf(mapOf("companies" to listOf(mapOf("name" to "ACME"))))))

        assertResult("""{ p: person { companies2(name: "ACME") { name } } }""",
                mapOf("p" to listOf(mapOf("companies2" to listOf(mapOf("name" to "ACME"))))))

        assertResult("""{ p: person { company(name: "ACME2") { name } } }""",
                mapOf("p" to listOf(mapOf("company" to null))))

        assertResult("""{ p: person { companies(name: "ACME2") { name } } }""",
                mapOf("p" to listOf(mapOf("companies" to emptyList<Map<String,Any>>()))))

        assertResult("""{ p: person { companies2(name: "ACME2") { name } } }""",
                mapOf("p" to listOf(mapOf("companies2" to emptyList<Map<String,Any>>()))))

        /* FAILS: https://github.com/neo4j-graphql/neo4j-graphql-java/issues/87
        // errors on non-null fields are propagated up to the first nullable field
        // and an error message is added
        assertResult("""{ p: person { name, company2(name: "ACME2") { name } } }""",
                mapOf("p" to listOf(null)))
        */
    }
}
